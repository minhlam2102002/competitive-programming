- Total difference between each element in array and median of array is minimum (Stick Lengths)
- Sort is much faster than map, set or unordered_map, unordered_set (Playlist)
- Data structure set is good (Traffic Lights)
- Use deque and time complexity is O(NlogN) (Josephus Problem I)
- Use indexed tree (Josephus Problem II)
- Sorting the array and simply use two pointer. One pointer is left and other is right. If left + right < target then increase left else decrease right (Sum of Two Values)
- For each first value, use function of Sum of Two Values for the rest of the array (Sum of Three Values)
- Similar to Sum of Three Values. (Sum of Four Values)
- Simply use monotonic stack (Nearest Smaller Values)
- Calculate PrefixSum array and for each PrefixSum[i] use map to count number of PrefixSum[i] - target values. (Subarray Sums I)
- Similar to Subarray Sums I (Subarray Sums II)
- Similar to Subarray Sums I (Subarray Divisibility)
- Binary search on sum. If it has signal: maximum of minimum or minimum of maximum then binary search on the figure(Array Division)
- indexed_set of pair c++ (Sliding Median)